<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="Beckhoff Automation GmbH" productName="TwinCAT PLC Control" productVersion="3.5.13.21" creationDateTime="2023-09-22T15:58:06.0575954" />
  <contentHeader name="PLC1" modificationDateTime="2023-09-22T15:58:06.0625898">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation />
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous>
      <pou name="SafeBrakeTest" pouType="program">
        <interface>
          <localVars>
            <variable name="ax1">
              <type>
                <derived name="AXIS_REF" />
              </type>
            </variable>
            <variable name="fbPower">
              <type>
                <derived name="MC_Power" />
              </type>
            </variable>
            <variable name="enablePower">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbBrakeTest">
              <type>
                <derived name="FB_CoEAX8000BrakeTest" />
              </type>
            </variable>
            <variable name="fbBrakeCtrl">
              <type>
                <derived name="FB_CoEAX8000BrakeControl" />
              </type>
            </variable>
            <variable name="enableBrakeTest">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="fbMoveAbs">
              <type>
                <derived name="MC_MoveAbsolute" />
              </type>
            </variable>
            <variable name="fbWriteDriveOpMode">
              <type>
                <derived name="MC_WriteDriveOperationMode" />
              </type>
            </variable>
            <variable name="fbReadDriveOpMode">
              <type>
                <derived name="MC_ReadDriveOperationMode" />
              </type>
            </variable>
            <variable name="setDriveOpMode">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="readDriveOpMode">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="brakeTestState">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="enableTest">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="enableMove">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="sbtTime">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="currentIq" address="%I*">
              <type>
                <DINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">fbMoveAbs(
	Axis:= ax1, 
	Execute:= , 
	Position:= , 
	Velocity:= , 
	 );

fbPower(
	Axis:= ax1, 
	Enable:= enablePower, 
	Enable_Positive:= enablePower, 
	Enable_Negative:= enablePower, 
	Override:= 100, 
	BufferMode:= , 
	Options:= , 
	Status=&gt; , 
	Busy=&gt; , 
	Active=&gt; , 
	Error=&gt; , 
	ErrorID=&gt; );

ax1.ReadStatus();

fbBrakeTest(
	Axis:= ax1, 
	Execute:= enableBrakeTest, 
	Succeeded:= safety.SBT_Valid_PLC,
	Torque:= 0.17, // will vary depending on motor
	VelocityLimit:= 150);

fbMoveAbs( Axis := Ax1, Execute := enableMove);
fbWriteDriveOpMode(Axis:= ax1, Execute:= setDriveOpMode);
fbReadDriveOpMode(Axis := ax1, Execute := readDriveOpMode);
sbtTime (IN := (brakeTestState=20), PT:= T#5S);

CASE brakeTestState OF
	
	0:	// is axis enabled?
		IF fbPower.Status AND enableTest THEN
			enableTest := FALSE;
			brakeTestState := 1;
		END_IF;
		
	1:	// move to safe position (0)
		fbMoveAbs.Position := 0;
		fbMoveAbs.Velocity := 250;
		enableMove := TRUE;

		IF fbMoveAbs.Busy THEN
			enableMove := FALSE;
			brakeTestState := 2;
		END_IF;		
		
	2:	// confirm in position
		IF ax1.Status.InTargetPosition THEN
			brakeTestState := 5;
		ELSIF fbMoveAbs.Error THEN
			brakeTestState := 99;
		END_IF;			
	
	5:	// engaged brake by using SBC
		safety.SBC_Enable_PLC := FALSE;
		brakeTestState := 10;
	
	10:	// switch to torque op mode
		fbWriteDriveOpMode.DriveOperationMode := DriveOperationMode_Torque;
		setDriveOpMode := TRUE;
		
		IF fbWriteDriveOpMode.Busy THEN
			setDriveOpMode := FALSE;
			brakeTestState := 11;
		ELSIF fbWriteDriveOpMode.Error THEN
			setDriveOpMode := FALSE;
			brakeTestState := 99;
		END_IF
		
	11:	// check torque op mode
		readDriveOpMode := TRUE;
		
		IF fbReadDriveOpMode.DriveOperationMode = DriveOperationMode_Torque THEN
			readDriveOpMode := FALSE;
			brakeTestState := 15;
		ELSIF fbReadDriveOpMode.Error THEN
			setDriveOpMode := FALSE;
			brakeTestState := 99;
		END_IF		
	
	15:	// start PLC brake test
		enableBrakeTest := TRUE;
		
		IF fbBrakeTest.Busy THEN
			safety.SBT_Enable_PLC := TRUE;
			brakeTestState := 20;
		ELSIF fbBrakeTest.Error THEN
			enableBrakeTest := FALSE;
			brakeTestState := 99;
		END_IF
	
	20:	// start safe brake test evaluation
	
		IF safety.SBT_Valid_PLC AND fbBrakeTest.Succeeded AND sbtTime.Q THEN
			enableBrakeTest := FALSE;
			safety.SBT_Enable_PLC := FALSE;
			safety.SBC_Enable_PLC := TRUE;
			brakeTestState := 100;
		ELSIF (safety.SBT_Error_PLC OR fbBrakeTest.Error) AND sbtTime.Q THEN
			safety.SBT_Enable_PLC := FALSE;
			brakeTestState := 99;
		END_IF
		
	100: // return back to starting operation position (500)
		readDriveOpMode := TRUE;
			
		IF fbReadDriveOpMode.DriveOperationMode = DriveOperationMode_Pos1 THEN
			fbMoveAbs.Position	:= 500;
			fbMoveAbs.Velocity	:= 250;
			enableMove			:= TRUE;
		END_IF
		
		IF fbMoveAbs.Busy THEN
			readDriveOpMode	:= FALSE;			
			enableMove		:= FALSE;
			brakeTestState := 0;
		ELSIF fbMoveAbs.Error THEN
			readDriveOpMode	:= FALSE;			
			enableMove		:= FALSE;
			brakeTestState := 99;
		END_IF
	
	
END_CASE
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>011953c6-ccb2-4589-aa3f-2b05e8e913ca</ObjectId>
          </data>
        </addData>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="SafeBrakeTest" ObjectId="011953c6-ccb2-4589-aa3f-2b05e8e913ca" />
      </ProjectStructure>
    </data>
  </addData>
</project>